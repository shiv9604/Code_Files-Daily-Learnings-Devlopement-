package com.hackathon.elitecoders.auth.service.impl;

import com.hackathon.elitecoders.auth.entities.User;
import com.hackathon.elitecoders.auth.repository.UserRepository;
import com.hackathon.elitecoders.exception.CustomUnauthorizedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.Set;

import static com.hackathon.elitecoders.auth.constants.ConfigConstants.ROLE_;
import static com.hackathon.elitecoders.auth.constants.ResponseErrors.*;

@Service
public class UserDetailServiceImpl implements UserDetailsService {

    /* Do not edit this file.*/

    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUserNameAndIsDisable(username, false);
        if (user == null) {
            throw new CustomUnauthorizedException(INVALID_ACCESS_TOKEN);
        }
        if (!user.getIsActive()) {
            throw new CustomUnauthorizedException(INACTIVE_USER);
        }
        return new org.springframework.security.core.userdetails.User(user.getUserName(), user.getPassword(), getAuthority(user));
    }

    private Set<SimpleGrantedAuthority> getAuthority(User user) {
        Set<SimpleGrantedAuthority> authorities = new HashSet<>();
        user.getRoles().forEach(role -> {
            authorities.add(new SimpleGrantedAuthority(ROLE_ + role.getName()));
        });
        return authorities;
    }

    /* Do not edit this file.*/
}
